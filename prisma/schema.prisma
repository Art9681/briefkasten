generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Bookmark {
  id          String       @id @default(cuid())
  title       String?
  url         String
  image       String?
  desc        String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  tags        TagsOnBookmarks[]
  user        User?        @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime     @default(now())

  @@unique([url, userId])
  @@index([categoryId])
  @@index([userId])
}

model TagsOnBookmarks {
  bookmarkId   String
  bookmark     Bookmark      @relation(fields: [bookmarkId], references: [id])
  tagId        String
  tag          Tag           @relation(fields: [tagId], references: [id])

  @@id([bookmarkId, tagId])
  @@index([bookmarkId])
  @@index([tagId])
}

model Tag {
  id          String       @id @default(cuid())
  name        String
  color       String?
  bookmarks   TagsOnBookmarks[]
  user        User?        @relation(fields: [userId], references: [id])
  userId      String

  @@index([userId])
}

model Category {
  id          String       @id @default(cuid())
  name        String
  description String?
  bookmarks   Bookmark[]
  user        User?        @relation(fields: [userId], references: [id])
  userId      String

  @@index([userId])
}

// NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String        @id @default(cuid())
  sessionToken String        @unique
  userId       String
  expires      DateTime
  user         User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookmarks     Bookmark[]
  tags          Tag[]
  categories    Category[]
}

model VerificationToken {
  identifier String
  token      String          @unique
  expires    DateTime

  @@unique([identifier, token])
}
