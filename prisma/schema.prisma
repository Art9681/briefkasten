generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Bookmark {
    id          String       @id @default(cuid())
    title       String?
    url         String       @unique
    image       String?
    desc        String?
    category    Category?    @relation(fields: [category_id], references: [id])
    category_id String?
    tags        TagsOnBookmarks[]
    user        User?        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id     String
    createdAt   DateTime     @default(now())

    @@index([category_id])
    @@index([user_id])
}

model TagsOnBookmarks {
  bookmark_id  String
  bookmark     Bookmark      @relation(fields: [bookmark_id], references: [id])
  tag_id       String
  tag          Tag           @relation(fields: [tag_id], references: [id])

  @@id([bookmark_id, tag_id])
}

model Tag {
    id          String       @id @default(cuid())
    name        String
    color       String
    bookmarks   TagsOnBookmarks[]
    user        User?        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id     String

    @@index([user_id])
}

model Category {
    id          String       @id @default(cuid())
    name        String
    description String
    bookmarks   Bookmark[]
    user        User?        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id     String

    @@index([user_id])
}

// NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String        @id @default(cuid())
  sessionToken String        @unique
  userId       String
  expires      DateTime
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookmarks     Bookmark[]
  tags          Tag[]
  categories    Category[]
}

model VerificationToken {
  identifier String
  token      String          @unique
  expires    DateTime

  @@unique([identifier, token])
}
